#include <iostream>
#include <vector>
#include <span>
#include <algorithm>
#include <type_traits>

/**
 * @brief Выполняет приближённый бинарный поиск в отсортированном массиве.
 * 
 * Для данного числа x находит ближайшее число в отсортированном массиве data.
 * Если таких чисел несколько, возвращает меньшее из них.
 * 
 * @param data Массив чисел, по которому будет выполняться поиск (отсортирован).
 * @param x Число, для которого нужно найти ближайшее значение в массиве.
 * 
 * @return Ближайшее число к x из массива data.
 */
int myBinSearch(std::span<const int> data, int x) {
    // Преобразуем тип индекса в signed для корректной работы с индексами
    using index_t = std::make_signed_t<std::size_t>;
    
    // Инициализируем границы поиска
    index_t L = -1;  ///< Левая граница, начинаем с -1 (это значит, что мы находимся перед первым элементом).
    auto R = static_cast<index_t>(data.size());  ///< Правая граница, начинается с размера массива.

    // Пока разница между правой и левой границей больше 1, продолжаем искать
    while (R - L > 1) {
        auto M = (R + L) / 2;  ///< Находим середину между L и R.
        
        // Если элемент в середине меньше x, двигаем левую границу вправо
        if (data[M] < x) {
            L = M;
        } else {
            R = M;  ///< Иначе двигаем правую границу влево
        }
    }

    // Если правая граница выходит за пределы массива, возвращаем элемент перед ней
    if (R == data.size()) return data[L];
    
    // Если левая граница равна -1, это значит, что x меньше всех элементов массива
    if (L == -1) return data[R];

    // Если разница между x и data[L] меньше либо равна разнице между x и data[R], возвращаем data[L], иначе data[R]
    return (x - data[L] <= data[R] - x) ? data[L] : data[R];
}

/**
 * @brief Главная функция программы.
 * 
 * Считывает два массива: первый массив отсортированных чисел и второй — массив запросов.
 * Для каждого запроса выводит число из первого массива, которое наиболее близко к запросу.
 * 
 * @return 0 в случае успешного завершения программы.
 */
int main() {
    int n, m;
    
    // Считываем размеры массивов
    std::cin >> n >> m;
    
    // Читаем отсортированный массив чисел
    std::vector<int> vec(n);
    for (auto& t : vec) std::cin >> t;

    // Читаем запросы
    std::vector<int> queries(m);
    for (auto& t : queries) std::cin >> t;

    // Для каждого запроса находим ближайшее число и выводим его
    for (auto t : queries)
        std::cout << myBinSearch(std::span<const int>(vec), t) << "\n"; 

    return 0;
}
